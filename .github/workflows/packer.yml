name: Packer Build on GCP

on: [push, pull_request]
      

jobs:
  PackerBuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_AUTH }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure gcloud CLI
        run: gcloud info

      - name: Install Packer
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install packer

      - name: Zip the repository
        run: |
          zip -r webapp.zip .
          mv webapp.zip packer/shell/

      - name: Run packer fmt
        run: |
          cd packer/
          if ! packer fmt -check . ; then
            echo "Failed - Packer fmt"
            exit 1
          fi

      - name: Create variables file from secrets
        run: |
          cat <<EOF > packer/variables.pkrvars.hcl
          vpc_name                       = "default"
          project_id                     = "${{ secrets.GCP_DEV_PROJECT_ID }}"
          app_name                       = "webapp"
          ssh_username                   = "centos"

          EOF

      - name: Initialize Packer
        run: |
          cd packer/
          if ! packer init . ; then
            echo "Failed - Packer init"
            exit 1
          fi
          
      - name: Validate Packer configuration
        run: |
          cd packer/
          if ! packer validate -var-file="variables.pkrvars.hcl" . ; then
            echo "Failed - Packer validate"
            exit 1
          fi

      - name: Run Packer build
        id: packer_build 
        run: |
          cd packer/
          packer init .
          packer plugins install github.com/hashicorp/googlecompute
          PACKER_OUTPUT=$(packer build -var-file="variables.pkrvars.hcl" .)
          
          IMAGE_ID=$(echo "$PACKER_OUTPUT" | grep 'A disk image was created in the .* project: packer-' | awk '{print $NF}')
          echo "Extracted Image ID: $IMAGE_ID"
          
          echo "::set-output name=image_id::$IMAGE_ID"
          
      - name: Create startup script
        run: |
            cat <<EOFM > startup-script.sh
            #!/bin/bash
            sudo tee /tmp/webapp/.env > /dev/null <<'EOF'
            USER_NAME=${{ secrets.MYSQL_USER }}
            PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DATABASE=${{ secrets.MYSQL_DATABASE }}
            HOST=${{ secrets.MYSQL_HOST }}
            PORT=3000
            EOF
  
            sudo systemctl daemon-reload
            sudo systemctl enable webapp_start.service
            sudo systemctl start webapp_start.service
            EOFM
            chmod +x startup-script.sh

      - name: Create instance template with Packer image
        run: |
            PROJECT_ID="${{ secrets.GCP_DEV_PROJECT_ID }}"
            MACHINE_TYPE="e2-medium"
            NETWORK_TIER="PREMIUM"
            SUBNET="webapp"
            STARTUP_SCRIPT="startup-script.sh"
            SERVICE_ACCOUNT_EMAIL="sangani@csye6225-414400.iam.gserviceaccount.com"
            SCOPES="https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/logging.write"
            REGION="us-east1"
            TAGS="webapp-instance,http-server"
            DISK_SIZE="100"
            DISK_TYPE="pd-standard"
            KEY_RING="${{ secrets.KEY_RING_CKMS }}"
            VM_KEY="${{ secrets.VM_KEY_CKMS }}"
            
            IMAGE_ID="${{ steps.packer_build.outputs.image_id }}"
            echo $IMAGE_ID
            IMAGE_NAME="projects/$PROJECT_ID/global/images/$IMAGE_ID"
            NEW_TEMPLATE="github-webapp-$IMAGE_ID"
            gcloud compute instance-templates create $NEW_TEMPLATE \
              --project="$PROJECT_ID" \
              --machine-type="$MACHINE_TYPE" \
              --network-interface=network-tier="$NETWORK_TIER",subnet="$SUBNET" \
              --metadata-from-file startup-script="$STARTUP_SCRIPT" \
              --maintenance-policy=MIGRATE \
              --provisioning-model=STANDARD \
              --service-account="$SERVICE_ACCOUNT_EMAIL" \
              --scopes="$SCOPES" \
              --region="$REGION" \
              --tags="$TAGS" \
              --create-disk="auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=$IMAGE_NAME,kms-key=projects/csye6225-414400/locations/us-east1/keyRings/$KEY_RING/cryptoKeys/$VM_KEY,mode=rw,size=$DISK_SIZE,type=$DISK_TYPE" \
              --no-shielded-secure-boot \
              --shielded-vtpm \
              --shielded-integrity-monitoring \
              --reservation-affinity=any
          
      - name: Update Instance Group with New Template
        run: |
          INSTANCE_GROUP_NAME="webapp-manager"
          IMAGE_ID="${{ steps.packer_build.outputs.image_id }}"
          echo $IMAGE_ID
          NEW_TEMPLATE="github-webapp-$IMAGE_ID"
          REGION="us-east1"
          gcloud compute instance-groups managed set-instance-template $INSTANCE_GROUP_NAME --template $NEW_TEMPLATE --region $REGION

      - name: Wait for Update to Complete
        run: |
          INSTANCE_GROUP_NAME="webapp-manager"
          IMAGE_ID="${{ steps.packer_build.outputs.image_id }}"
          echo "Image ID: $IMAGE_ID"
          NEW_TEMPLATE="github-webapp-$IMAGE_ID"
          REGION="us-east1"
          
          # Start the rolling update and capture the operation name (ID)
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GROUP_NAME \
              --project="${{ secrets.GCP_DEV_PROJECT_ID }}" \
              --type='proactive' \
              --max-surge=3 \
              --max-unavailable=3 \
              --minimal-action='replace' \
              --replacement-method='substitute' \
              --version=template=projects/${{ secrets.GCP_DEV_PROJECT_ID }}/global/instanceTemplates/$NEW_TEMPLATE \
              --region=$REGION --format="value(name)"
          
          gcloud compute instance-groups managed wait-until $INSTANCE_GROUP_NAME --version-target-reached --region=$REGION
